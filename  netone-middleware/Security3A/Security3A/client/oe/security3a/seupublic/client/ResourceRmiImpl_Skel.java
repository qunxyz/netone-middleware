// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package oe.security3a.seupublic.client;

public final class ResourceRmiImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("java.lang.String SyncUser(java.lang.String, java.lang.String, java.lang.String)[]"),
	new java.rmi.server.Operation("boolean addClerk(java.lang.String, oe.security3a.seucore.obj.Clerk)"),
	new java.rmi.server.Operation("void addFormCopyResource(java.lang.String, java.lang.String[], int)"),
	new java.rmi.server.Operation("java.io.Serializable addResource(oe.security3a.seucore.obj.db.UmsProtectedobject)"),
	new java.rmi.server.Operation("java.io.Serializable addResource(oe.security3a.seucore.obj.db.UmsProtectedobject, java.lang.String)"),
	new java.rmi.server.Operation("java.io.Serializable addRole(java.lang.String, java.util.Map)"),
	new java.rmi.server.Operation("boolean checkExist(java.lang.String)"),
	new java.rmi.server.Operation("boolean dropAllSubResource(java.lang.String)"),
	new java.rmi.server.Operation("boolean dropClerk(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("boolean dropResource(java.lang.String)"),
	new java.rmi.server.Operation("boolean dropRole(java.lang.String)"),
	new java.rmi.server.Operation("boolean dropRoles(java.util.List)"),
	new java.rmi.server.Operation("boolean dropUserRoles(java.lang.String, java.util.List)"),
	new java.rmi.server.Operation("java.util.List fetchClerk(java.lang.String, oe.security3a.seucore.obj.Clerk, java.util.Map, java.lang.String)"),
	new java.rmi.server.Operation("oe.security3a.seucore.obj.db.UmsRole fetchExtendedRole(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchPermission(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchResource(oe.security3a.seucore.obj.db.UmsProtectedobject, java.util.Map)"),
	new java.rmi.server.Operation("java.util.List fetchResource(oe.security3a.seucore.obj.db.UmsProtectedobject, java.util.Map, java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchRole(oe.security3a.seucore.obj.db.UmsRole, java.util.Map, java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchUser(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchUser2role(java.lang.String, oe.security3a.seucore.obj.User2Role, java.util.Map, java.lang.String)"),
	new java.rmi.server.Operation("java.util.List getUserRoles(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("oe.security3a.seucore.obj.Clerk loadClerk(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("oe.security3a.seucore.obj.db.UmsProtectedobject loadResourceById(java.lang.String)"),
	new java.rmi.server.Operation("oe.security3a.seucore.obj.db.UmsProtectedobject loadResourceByNatural(java.lang.String)"),
	new java.rmi.server.Operation("oe.security3a.seucore.obj.db.UmsRole loadRole(java.lang.Long)"),
	new java.rmi.server.Operation("boolean moveDownResource(java.lang.String)"),
	new java.rmi.server.Operation("boolean moveRoleDeptOpe(java.lang.String, java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("boolean moveUpResource(java.lang.String)"),
	new java.rmi.server.Operation("boolean moveUserDeptOpe(java.lang.String, java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("long queryObjectNumberProtectedObj(oe.security3a.seucore.obj.db.UmsProtectedobject, java.util.Map, java.lang.String)"),
	new java.rmi.server.Operation("java.util.List queryObjectProtectedObj(oe.security3a.seucore.obj.db.UmsProtectedobject, java.util.Map, int, int, java.lang.String)"),
	new java.rmi.server.Operation("java.util.List queryObjectsClerk(java.lang.String, oe.security3a.seucore.obj.Clerk, java.util.Map, int, int)"),
	new java.rmi.server.Operation("long queryObjectsNumberClerk(java.lang.String, oe.security3a.seucore.obj.Clerk, java.util.Map)"),
	new java.rmi.server.Operation("long queryObjectsNumberRole(oe.security3a.seucore.obj.db.UmsRole, java.util.Map)"),
	new java.rmi.server.Operation("java.util.List queryObjectsRole(oe.security3a.seucore.obj.db.UmsRole, java.util.Map, int, int)"),
	new java.rmi.server.Operation("boolean resetPassword(java.lang.String, oe.security3a.seucore.obj.Clerk)"),
	new java.rmi.server.Operation("void roleRelationupdate(java.lang.String, java.lang.String, java.util.List)"),
	new java.rmi.server.Operation("java.util.List subResource(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List subResourceByNaturalname(java.lang.String)"),
	new java.rmi.server.Operation("boolean updateClerk(java.lang.String, oe.security3a.seucore.obj.Clerk)"),
	new java.rmi.server.Operation("boolean updateResource(oe.security3a.seucore.obj.db.UmsProtectedobject)"),
	new java.rmi.server.Operation("boolean updateRole(java.lang.String, java.util.Map)"),
	new java.rmi.server.Operation("oe.security3a.seucore.obj.Clerk validationUserOpe(java.lang.String, java.lang.String, java.lang.String)")
    };
    
    private static final long interfaceHash = -8852040422962541650L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (opnum < 0) {
	    if (hash == 6788138561528176163L) {
		opnum = 0;
	    } else if (hash == 2699251529191637824L) {
		opnum = 1;
	    } else if (hash == -4603541790264476139L) {
		opnum = 2;
	    } else if (hash == 1509533383844034377L) {
		opnum = 3;
	    } else if (hash == -1748336223485365352L) {
		opnum = 4;
	    } else if (hash == -7434277783348822327L) {
		opnum = 5;
	    } else if (hash == -7149324620357741348L) {
		opnum = 6;
	    } else if (hash == 7496701096913968256L) {
		opnum = 7;
	    } else if (hash == -7642034804957619508L) {
		opnum = 8;
	    } else if (hash == -3296042006252061014L) {
		opnum = 9;
	    } else if (hash == 8170020339836761459L) {
		opnum = 10;
	    } else if (hash == 1047878997704648399L) {
		opnum = 11;
	    } else if (hash == 1155897459632522736L) {
		opnum = 12;
	    } else if (hash == 6612362559791986773L) {
		opnum = 13;
	    } else if (hash == -8495938907114670777L) {
		opnum = 14;
	    } else if (hash == -869516208938528053L) {
		opnum = 15;
	    } else if (hash == 8597152595734484356L) {
		opnum = 16;
	    } else if (hash == 7407443664387178934L) {
		opnum = 17;
	    } else if (hash == 9012942565931702862L) {
		opnum = 18;
	    } else if (hash == 2477865903439354961L) {
		opnum = 19;
	    } else if (hash == 3007410383054361042L) {
		opnum = 20;
	    } else if (hash == -7490894687507559008L) {
		opnum = 21;
	    } else if (hash == 7992926591649022325L) {
		opnum = 22;
	    } else if (hash == -2765830230228499939L) {
		opnum = 23;
	    } else if (hash == 774692053005178566L) {
		opnum = 24;
	    } else if (hash == -4843989370997608163L) {
		opnum = 25;
	    } else if (hash == 8921535932061701847L) {
		opnum = 26;
	    } else if (hash == -6947232796479806422L) {
		opnum = 27;
	    } else if (hash == 6751351799788629888L) {
		opnum = 28;
	    } else if (hash == -1679565849855842759L) {
		opnum = 29;
	    } else if (hash == 3917993063483022552L) {
		opnum = 30;
	    } else if (hash == 884204290965570747L) {
		opnum = 31;
	    } else if (hash == -3803770144971794414L) {
		opnum = 32;
	    } else if (hash == 7606941368888761283L) {
		opnum = 33;
	    } else if (hash == 6116781496451802429L) {
		opnum = 34;
	    } else if (hash == -4738256444346102625L) {
		opnum = 35;
	    } else if (hash == -5368106816393496857L) {
		opnum = 36;
	    } else if (hash == -2278084794035689746L) {
		opnum = 37;
	    } else if (hash == 1936669458051577152L) {
		opnum = 38;
	    } else if (hash == -245636705657490077L) {
		opnum = 39;
	    } else if (hash == 466927926625413367L) {
		opnum = 40;
	    } else if (hash == 4800288328048325176L) {
		opnum = 41;
	    } else if (hash == 4216179927519812861L) {
		opnum = 42;
	    } else if (hash == -1490135253516697105L) {
		opnum = 43;
	    } else {
		throw new java.rmi.UnmarshalException("invalid method hash");
	    }
	} else {
	    if (hash != interfaceHash)
		throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	}
	
	oe.security3a.seupublic.client.ResourceRmiImpl server = (oe.security3a.seupublic.client.ResourceRmiImpl) obj;
	switch (opnum) {
	case 0: // SyncUser(String, String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    java.lang.String $param_String_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.lang.String[] $result = server.SyncUser($param_String_1, $param_String_2, $param_String_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // addClerk(String, Clerk)
	{
	    java.lang.String $param_String_1;
	    oe.security3a.seucore.obj.Clerk $param_Clerk_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_Clerk_2 = (oe.security3a.seucore.obj.Clerk) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.addClerk($param_String_1, $param_Clerk_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // addFormCopyResource(String, String[], int)
	{
	    java.lang.String $param_String_1;
	    java.lang.String[] $param_arrayOf_String_2;
	    int $param_int_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_arrayOf_String_2 = (java.lang.String[]) in.readObject();
		$param_int_3 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.addFormCopyResource($param_String_1, $param_arrayOf_String_2, $param_int_3);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // addResource(UmsProtectedobject)
	{
	    oe.security3a.seucore.obj.db.UmsProtectedobject $param_UmsProtectedobject_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_UmsProtectedobject_1 = (oe.security3a.seucore.obj.db.UmsProtectedobject) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.io.Serializable $result = server.addResource($param_UmsProtectedobject_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // addResource(UmsProtectedobject, String)
	{
	    oe.security3a.seucore.obj.db.UmsProtectedobject $param_UmsProtectedobject_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_UmsProtectedobject_1 = (oe.security3a.seucore.obj.db.UmsProtectedobject) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.io.Serializable $result = server.addResource($param_UmsProtectedobject_1, $param_String_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // addRole(String, Map)
	{
	    java.lang.String $param_String_1;
	    java.util.Map $param_Map_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_Map_2 = (java.util.Map) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.io.Serializable $result = server.addRole($param_String_1, $param_Map_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // checkExist(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.checkExist($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // dropAllSubResource(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.dropAllSubResource($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 8: // dropClerk(String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.dropClerk($param_String_1, $param_String_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 9: // dropResource(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.dropResource($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 10: // dropRole(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.dropRole($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 11: // dropRoles(List)
	{
	    java.util.List $param_List_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_List_1 = (java.util.List) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.dropRoles($param_List_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 12: // dropUserRoles(String, List)
	{
	    java.lang.String $param_String_1;
	    java.util.List $param_List_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_List_2 = (java.util.List) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.dropUserRoles($param_String_1, $param_List_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 13: // fetchClerk(String, Clerk, Map, String)
	{
	    java.lang.String $param_String_1;
	    oe.security3a.seucore.obj.Clerk $param_Clerk_2;
	    java.util.Map $param_Map_3;
	    java.lang.String $param_String_4;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_Clerk_2 = (oe.security3a.seucore.obj.Clerk) in.readObject();
		$param_Map_3 = (java.util.Map) in.readObject();
		$param_String_4 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.fetchClerk($param_String_1, $param_Clerk_2, $param_Map_3, $param_String_4);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 14: // fetchExtendedRole(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    oe.security3a.seucore.obj.db.UmsRole $result = server.fetchExtendedRole($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 15: // fetchPermission(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.fetchPermission($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 16: // fetchResource(UmsProtectedobject, Map)
	{
	    oe.security3a.seucore.obj.db.UmsProtectedobject $param_UmsProtectedobject_1;
	    java.util.Map $param_Map_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_UmsProtectedobject_1 = (oe.security3a.seucore.obj.db.UmsProtectedobject) in.readObject();
		$param_Map_2 = (java.util.Map) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.fetchResource($param_UmsProtectedobject_1, $param_Map_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 17: // fetchResource(UmsProtectedobject, Map, String)
	{
	    oe.security3a.seucore.obj.db.UmsProtectedobject $param_UmsProtectedobject_1;
	    java.util.Map $param_Map_2;
	    java.lang.String $param_String_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_UmsProtectedobject_1 = (oe.security3a.seucore.obj.db.UmsProtectedobject) in.readObject();
		$param_Map_2 = (java.util.Map) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.fetchResource($param_UmsProtectedobject_1, $param_Map_2, $param_String_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 18: // fetchRole(UmsRole, Map, String)
	{
	    oe.security3a.seucore.obj.db.UmsRole $param_UmsRole_1;
	    java.util.Map $param_Map_2;
	    java.lang.String $param_String_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_UmsRole_1 = (oe.security3a.seucore.obj.db.UmsRole) in.readObject();
		$param_Map_2 = (java.util.Map) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.fetchRole($param_UmsRole_1, $param_Map_2, $param_String_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 19: // fetchUser(String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.fetchUser($param_String_1, $param_String_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 20: // fetchUser2role(String, User2Role, Map, String)
	{
	    java.lang.String $param_String_1;
	    oe.security3a.seucore.obj.User2Role $param_User2Role_2;
	    java.util.Map $param_Map_3;
	    java.lang.String $param_String_4;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_User2Role_2 = (oe.security3a.seucore.obj.User2Role) in.readObject();
		$param_Map_3 = (java.util.Map) in.readObject();
		$param_String_4 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.fetchUser2role($param_String_1, $param_User2Role_2, $param_Map_3, $param_String_4);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 21: // getUserRoles(String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.getUserRoles($param_String_1, $param_String_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 22: // loadClerk(String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    oe.security3a.seucore.obj.Clerk $result = server.loadClerk($param_String_1, $param_String_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 23: // loadResourceById(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    oe.security3a.seucore.obj.db.UmsProtectedobject $result = server.loadResourceById($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 24: // loadResourceByNatural(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    oe.security3a.seucore.obj.db.UmsProtectedobject $result = server.loadResourceByNatural($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 25: // loadRole(Long)
	{
	    java.lang.Long $param_Long_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Long_1 = (java.lang.Long) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    oe.security3a.seucore.obj.db.UmsRole $result = server.loadRole($param_Long_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 26: // moveDownResource(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.moveDownResource($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 27: // moveRoleDeptOpe(String, String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    java.lang.String $param_String_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.moveRoleDeptOpe($param_String_1, $param_String_2, $param_String_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 28: // moveUpResource(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.moveUpResource($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 29: // moveUserDeptOpe(String, String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    java.lang.String $param_String_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.moveUserDeptOpe($param_String_1, $param_String_2, $param_String_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 30: // queryObjectNumberProtectedObj(UmsProtectedobject, Map, String)
	{
	    oe.security3a.seucore.obj.db.UmsProtectedobject $param_UmsProtectedobject_1;
	    java.util.Map $param_Map_2;
	    java.lang.String $param_String_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_UmsProtectedobject_1 = (oe.security3a.seucore.obj.db.UmsProtectedobject) in.readObject();
		$param_Map_2 = (java.util.Map) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    long $result = server.queryObjectNumberProtectedObj($param_UmsProtectedobject_1, $param_Map_2, $param_String_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeLong($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 31: // queryObjectProtectedObj(UmsProtectedobject, Map, int, int, String)
	{
	    oe.security3a.seucore.obj.db.UmsProtectedobject $param_UmsProtectedobject_1;
	    java.util.Map $param_Map_2;
	    int $param_int_3;
	    int $param_int_4;
	    java.lang.String $param_String_5;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_UmsProtectedobject_1 = (oe.security3a.seucore.obj.db.UmsProtectedobject) in.readObject();
		$param_Map_2 = (java.util.Map) in.readObject();
		$param_int_3 = in.readInt();
		$param_int_4 = in.readInt();
		$param_String_5 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.queryObjectProtectedObj($param_UmsProtectedobject_1, $param_Map_2, $param_int_3, $param_int_4, $param_String_5);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 32: // queryObjectsClerk(String, Clerk, Map, int, int)
	{
	    java.lang.String $param_String_1;
	    oe.security3a.seucore.obj.Clerk $param_Clerk_2;
	    java.util.Map $param_Map_3;
	    int $param_int_4;
	    int $param_int_5;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_Clerk_2 = (oe.security3a.seucore.obj.Clerk) in.readObject();
		$param_Map_3 = (java.util.Map) in.readObject();
		$param_int_4 = in.readInt();
		$param_int_5 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.queryObjectsClerk($param_String_1, $param_Clerk_2, $param_Map_3, $param_int_4, $param_int_5);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 33: // queryObjectsNumberClerk(String, Clerk, Map)
	{
	    java.lang.String $param_String_1;
	    oe.security3a.seucore.obj.Clerk $param_Clerk_2;
	    java.util.Map $param_Map_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_Clerk_2 = (oe.security3a.seucore.obj.Clerk) in.readObject();
		$param_Map_3 = (java.util.Map) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    long $result = server.queryObjectsNumberClerk($param_String_1, $param_Clerk_2, $param_Map_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeLong($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 34: // queryObjectsNumberRole(UmsRole, Map)
	{
	    oe.security3a.seucore.obj.db.UmsRole $param_UmsRole_1;
	    java.util.Map $param_Map_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_UmsRole_1 = (oe.security3a.seucore.obj.db.UmsRole) in.readObject();
		$param_Map_2 = (java.util.Map) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    long $result = server.queryObjectsNumberRole($param_UmsRole_1, $param_Map_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeLong($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 35: // queryObjectsRole(UmsRole, Map, int, int)
	{
	    oe.security3a.seucore.obj.db.UmsRole $param_UmsRole_1;
	    java.util.Map $param_Map_2;
	    int $param_int_3;
	    int $param_int_4;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_UmsRole_1 = (oe.security3a.seucore.obj.db.UmsRole) in.readObject();
		$param_Map_2 = (java.util.Map) in.readObject();
		$param_int_3 = in.readInt();
		$param_int_4 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.queryObjectsRole($param_UmsRole_1, $param_Map_2, $param_int_3, $param_int_4);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 36: // resetPassword(String, Clerk)
	{
	    java.lang.String $param_String_1;
	    oe.security3a.seucore.obj.Clerk $param_Clerk_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_Clerk_2 = (oe.security3a.seucore.obj.Clerk) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.resetPassword($param_String_1, $param_Clerk_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 37: // roleRelationupdate(String, String, List)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    java.util.List $param_List_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_List_3 = (java.util.List) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.roleRelationupdate($param_String_1, $param_String_2, $param_List_3);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 38: // subResource(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.subResource($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 39: // subResourceByNaturalname(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.subResourceByNaturalname($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 40: // updateClerk(String, Clerk)
	{
	    java.lang.String $param_String_1;
	    oe.security3a.seucore.obj.Clerk $param_Clerk_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_Clerk_2 = (oe.security3a.seucore.obj.Clerk) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.updateClerk($param_String_1, $param_Clerk_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 41: // updateResource(UmsProtectedobject)
	{
	    oe.security3a.seucore.obj.db.UmsProtectedobject $param_UmsProtectedobject_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_UmsProtectedobject_1 = (oe.security3a.seucore.obj.db.UmsProtectedobject) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.updateResource($param_UmsProtectedobject_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 42: // updateRole(String, Map)
	{
	    java.lang.String $param_String_1;
	    java.util.Map $param_Map_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_Map_2 = (java.util.Map) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.updateRole($param_String_1, $param_Map_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 43: // validationUserOpe(String, String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    java.lang.String $param_String_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    oe.security3a.seucore.obj.Clerk $result = server.validationUserOpe($param_String_1, $param_String_2, $param_String_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
