// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package oe.midware.workflow.service;

public final class WorkflowConsoleImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void commitActivity(java.lang.String)"),
	new java.rmi.server.Operation("void commitActivity(oe.midware.workflow.runtime.ormobj.TWfWorklist)"),
	new java.rmi.server.Operation("void commitActivityByManual(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("void commitActivityByManual(java.lang.String, java.lang.String[])"),
	new java.rmi.server.Operation("void commitActivityByManual(oe.midware.workflow.runtime.ormobj.TWfWorklist, java.util.List)"),
	new java.rmi.server.Operation("void commitActivityByManual(oe.midware.workflow.runtime.ormobj.TWfWorklist, oe.midware.workflow.xpdl.model.activity.Activity)"),
	new java.rmi.server.Operation("int coreSqlhandle(java.lang.String)"),
	new java.rmi.server.Operation("oe.midware.workflow.client.Session descriptSession(java.lang.String)"),
	new java.rmi.server.Operation("void dropProcess(java.lang.String)"),
	new java.rmi.server.Operation("void dropProcess(oe.midware.workflow.runtime.ormobj.TWfRuntime)"),
	new java.rmi.server.Operation("java.lang.String eai(java.lang.String, java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.lang.String exeScript(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.lang.Object getSessionAttribute(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("void initProcess(java.lang.String)"),
	new java.rmi.server.Operation("void initProcess(oe.midware.workflow.runtime.ormobj.TWfRuntime)"),
	new java.rmi.server.Operation("boolean judgementRule(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.lang.String newProcess(java.lang.String)"),
	new java.rmi.server.Operation("oe.midware.workflow.runtime.ormobj.TWfRuntime newProcess(oe.midware.workflow.xpdl.model.workflow.WorkflowProcess)"),
	new java.rmi.server.Operation("void removeSession(java.lang.String)"),
	new java.rmi.server.Operation("void runProcess(java.lang.String)"),
	new java.rmi.server.Operation("void runProcess(oe.midware.workflow.runtime.ormobj.TWfRuntime)"),
	new java.rmi.server.Operation("void runSubFlow(java.lang.String, java.lang.String, java.lang.String, boolean)"),
	new java.rmi.server.Operation("void setSessionAttribute(java.lang.String, java.lang.String, java.lang.Object)"),
	new java.rmi.server.Operation("void updateRelevantvar(oe.midware.workflow.runtime.ormobj.TWfRelevantvar)"),
	new java.rmi.server.Operation("void updateRelevantvarUseLog(oe.midware.workflow.runtime.ormobj.TWfRelevantvar, java.lang.String)"),
	new java.rmi.server.Operation("void updateRelevantvars(java.util.List)"),
	new java.rmi.server.Operation("void updateRelevantvarsUseLog(java.util.List, java.lang.String)"),
	new java.rmi.server.Operation("void updateWorklistExtendattribute(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("void updateWorklistStatus(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("void worklistAppBind(java.lang.String, java.lang.String, java.lang.String)")
    };
    
    private static final long interfaceHash = -8887197952085828249L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (opnum < 0) {
	    if (hash == 8131871667129750397L) {
		opnum = 0;
	    } else if (hash == -4655325127478918818L) {
		opnum = 1;
	    } else if (hash == -4991940486981281178L) {
		opnum = 2;
	    } else if (hash == 7703441546300855480L) {
		opnum = 3;
	    } else if (hash == -7107939466257947561L) {
		opnum = 4;
	    } else if (hash == -9170728608506728403L) {
		opnum = 5;
	    } else if (hash == -4002124289402209572L) {
		opnum = 6;
	    } else if (hash == -5491911163107160312L) {
		opnum = 7;
	    } else if (hash == 2731747658853194775L) {
		opnum = 8;
	    } else if (hash == 338460575635350289L) {
		opnum = 9;
	    } else if (hash == 8477265974883240214L) {
		opnum = 10;
	    } else if (hash == -5036647559184159196L) {
		opnum = 11;
	    } else if (hash == -3785827562705672380L) {
		opnum = 12;
	    } else if (hash == -1270135615889412677L) {
		opnum = 13;
	    } else if (hash == -8392997652454200060L) {
		opnum = 14;
	    } else if (hash == -8351566676947975781L) {
		opnum = 15;
	    } else if (hash == -6173435621847002805L) {
		opnum = 16;
	    } else if (hash == -5081520500251258056L) {
		opnum = 17;
	    } else if (hash == 528665140188616162L) {
		opnum = 18;
	    } else if (hash == 366577428389685808L) {
		opnum = 19;
	    } else if (hash == -7436835289920928677L) {
		opnum = 20;
	    } else if (hash == -6005999721338886019L) {
		opnum = 21;
	    } else if (hash == 7988202451820941519L) {
		opnum = 22;
	    } else if (hash == -2157974926385165766L) {
		opnum = 23;
	    } else if (hash == 3994445439569230953L) {
		opnum = 24;
	    } else if (hash == -3338036758033165813L) {
		opnum = 25;
	    } else if (hash == 7762712804801303245L) {
		opnum = 26;
	    } else if (hash == -7748092936157074027L) {
		opnum = 27;
	    } else if (hash == -3429931525425157791L) {
		opnum = 28;
	    } else if (hash == 1535355903727829402L) {
		opnum = 29;
	    } else {
		throw new java.rmi.UnmarshalException("invalid method hash");
	    }
	} else {
	    if (hash != interfaceHash)
		throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	}
	
	oe.midware.workflow.service.WorkflowConsoleImpl server = (oe.midware.workflow.service.WorkflowConsoleImpl) obj;
	switch (opnum) {
	case 0: // commitActivity(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.commitActivity($param_String_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // commitActivity(TWfWorklist)
	{
	    oe.midware.workflow.runtime.ormobj.TWfWorklist $param_TWfWorklist_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_TWfWorklist_1 = (oe.midware.workflow.runtime.ormobj.TWfWorklist) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.commitActivity($param_TWfWorklist_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // commitActivityByManual(String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.commitActivityByManual($param_String_1, $param_String_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // commitActivityByManual(String, String[])
	{
	    java.lang.String $param_String_1;
	    java.lang.String[] $param_arrayOf_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_arrayOf_String_2 = (java.lang.String[]) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.commitActivityByManual($param_String_1, $param_arrayOf_String_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // commitActivityByManual(TWfWorklist, List)
	{
	    oe.midware.workflow.runtime.ormobj.TWfWorklist $param_TWfWorklist_1;
	    java.util.List $param_List_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_TWfWorklist_1 = (oe.midware.workflow.runtime.ormobj.TWfWorklist) in.readObject();
		$param_List_2 = (java.util.List) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.commitActivityByManual($param_TWfWorklist_1, $param_List_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // commitActivityByManual(TWfWorklist, Activity)
	{
	    oe.midware.workflow.runtime.ormobj.TWfWorklist $param_TWfWorklist_1;
	    oe.midware.workflow.xpdl.model.activity.Activity $param_Activity_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_TWfWorklist_1 = (oe.midware.workflow.runtime.ormobj.TWfWorklist) in.readObject();
		$param_Activity_2 = (oe.midware.workflow.xpdl.model.activity.Activity) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.commitActivityByManual($param_TWfWorklist_1, $param_Activity_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // coreSqlhandle(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.coreSqlhandle($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // descriptSession(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    oe.midware.workflow.client.Session $result = server.descriptSession($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 8: // dropProcess(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.dropProcess($param_String_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 9: // dropProcess(TWfRuntime)
	{
	    oe.midware.workflow.runtime.ormobj.TWfRuntime $param_TWfRuntime_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_TWfRuntime_1 = (oe.midware.workflow.runtime.ormobj.TWfRuntime) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.dropProcess($param_TWfRuntime_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 10: // eai(String, String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    java.lang.String $param_String_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.lang.String $result = server.eai($param_String_1, $param_String_2, $param_String_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 11: // exeScript(String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.lang.String $result = server.exeScript($param_String_1, $param_String_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 12: // getSessionAttribute(String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.lang.Object $result = server.getSessionAttribute($param_String_1, $param_String_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 13: // initProcess(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.initProcess($param_String_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 14: // initProcess(TWfRuntime)
	{
	    oe.midware.workflow.runtime.ormobj.TWfRuntime $param_TWfRuntime_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_TWfRuntime_1 = (oe.midware.workflow.runtime.ormobj.TWfRuntime) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.initProcess($param_TWfRuntime_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 15: // judgementRule(String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.judgementRule($param_String_1, $param_String_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 16: // newProcess(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.lang.String $result = server.newProcess($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 17: // newProcess(WorkflowProcess)
	{
	    oe.midware.workflow.xpdl.model.workflow.WorkflowProcess $param_WorkflowProcess_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_WorkflowProcess_1 = (oe.midware.workflow.xpdl.model.workflow.WorkflowProcess) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    oe.midware.workflow.runtime.ormobj.TWfRuntime $result = server.newProcess($param_WorkflowProcess_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 18: // removeSession(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.removeSession($param_String_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 19: // runProcess(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.runProcess($param_String_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 20: // runProcess(TWfRuntime)
	{
	    oe.midware.workflow.runtime.ormobj.TWfRuntime $param_TWfRuntime_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_TWfRuntime_1 = (oe.midware.workflow.runtime.ormobj.TWfRuntime) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.runProcess($param_TWfRuntime_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 21: // runSubFlow(String, String, String, boolean)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    java.lang.String $param_String_3;
	    boolean $param_boolean_4;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
		$param_boolean_4 = in.readBoolean();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.runSubFlow($param_String_1, $param_String_2, $param_String_3, $param_boolean_4);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 22: // setSessionAttribute(String, String, Object)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    java.lang.Object $param_Object_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_Object_3 = (java.lang.Object) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.setSessionAttribute($param_String_1, $param_String_2, $param_Object_3);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 23: // updateRelevantvar(TWfRelevantvar)
	{
	    oe.midware.workflow.runtime.ormobj.TWfRelevantvar $param_TWfRelevantvar_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_TWfRelevantvar_1 = (oe.midware.workflow.runtime.ormobj.TWfRelevantvar) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.updateRelevantvar($param_TWfRelevantvar_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 24: // updateRelevantvarUseLog(TWfRelevantvar, String)
	{
	    oe.midware.workflow.runtime.ormobj.TWfRelevantvar $param_TWfRelevantvar_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_TWfRelevantvar_1 = (oe.midware.workflow.runtime.ormobj.TWfRelevantvar) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.updateRelevantvarUseLog($param_TWfRelevantvar_1, $param_String_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 25: // updateRelevantvars(List)
	{
	    java.util.List $param_List_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_List_1 = (java.util.List) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.updateRelevantvars($param_List_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 26: // updateRelevantvarsUseLog(List, String)
	{
	    java.util.List $param_List_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_List_1 = (java.util.List) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.updateRelevantvarsUseLog($param_List_1, $param_String_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 27: // updateWorklistExtendattribute(String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.updateWorklistExtendattribute($param_String_1, $param_String_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 28: // updateWorklistStatus(String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.updateWorklistStatus($param_String_1, $param_String_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 29: // worklistAppBind(String, String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    java.lang.String $param_String_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.worklistAppBind($param_String_1, $param_String_2, $param_String_3);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
