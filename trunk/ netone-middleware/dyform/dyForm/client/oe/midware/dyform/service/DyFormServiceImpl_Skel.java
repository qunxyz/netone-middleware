// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package oe.midware.dyform.service;

public final class DyFormServiceImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("java.lang.String addData(java.lang.String, oe.cav.bean.logic.bus.TCsBus)"),
	new java.rmi.server.Operation("boolean deleteData(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchColumnList(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchColumnListUrl(java.lang.String)"),
	new java.rmi.server.Operation("java.util.Map fetchTitleInfos(java.lang.String)"),
	new java.rmi.server.Operation("oe.cav.bean.logic.bus.TCsBus loadData(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("oe.cav.bean.logic.form.TCsForm loadForm(java.lang.String)"),
	new java.rmi.server.Operation("oe.cav.bean.logic.form.TCsForm loadFormUrl(java.lang.String)"),
	new java.rmi.server.Operation("boolean modifyData(oe.cav.bean.logic.bus.TCsBus)"),
	new java.rmi.server.Operation("java.util.List queryData(oe.cav.bean.logic.bus.TCsBus, int, int, java.lang.String)"),
	new java.rmi.server.Operation("int queryDataNum(oe.cav.bean.logic.bus.TCsBus, java.lang.String)")
    };
    
    private static final long interfaceHash = 3901115482363135351L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (opnum < 0) {
	    if (hash == 1598616788026202948L) {
		opnum = 0;
	    } else if (hash == 1956327430858575990L) {
		opnum = 1;
	    } else if (hash == -5555964671379842530L) {
		opnum = 2;
	    } else if (hash == -8139421515388001439L) {
		opnum = 3;
	    } else if (hash == -5124103029656505588L) {
		opnum = 4;
	    } else if (hash == 1241905952568576176L) {
		opnum = 5;
	    } else if (hash == -4471333813938396406L) {
		opnum = 6;
	    } else if (hash == -1200165427774053191L) {
		opnum = 7;
	    } else if (hash == -2700501398074747510L) {
		opnum = 8;
	    } else if (hash == 8134596843927737316L) {
		opnum = 9;
	    } else if (hash == -6129786152352957716L) {
		opnum = 10;
	    } else {
		throw new java.rmi.UnmarshalException("invalid method hash");
	    }
	} else {
	    if (hash != interfaceHash)
		throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	}
	
	oe.midware.dyform.service.DyFormServiceImpl server = (oe.midware.dyform.service.DyFormServiceImpl) obj;
	switch (opnum) {
	case 0: // addData(String, TCsBus)
	{
	    java.lang.String $param_String_1;
	    oe.cav.bean.logic.bus.TCsBus $param_TCsBus_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_TCsBus_2 = (oe.cav.bean.logic.bus.TCsBus) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.lang.String $result = server.addData($param_String_1, $param_TCsBus_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // deleteData(String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.deleteData($param_String_1, $param_String_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // fetchColumnList(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.fetchColumnList($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // fetchColumnListUrl(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.fetchColumnListUrl($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // fetchTitleInfos(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.Map $result = server.fetchTitleInfos($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // loadData(String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    oe.cav.bean.logic.bus.TCsBus $result = server.loadData($param_String_1, $param_String_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // loadForm(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    oe.cav.bean.logic.form.TCsForm $result = server.loadForm($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // loadFormUrl(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    oe.cav.bean.logic.form.TCsForm $result = server.loadFormUrl($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 8: // modifyData(TCsBus)
	{
	    oe.cav.bean.logic.bus.TCsBus $param_TCsBus_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_TCsBus_1 = (oe.cav.bean.logic.bus.TCsBus) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.modifyData($param_TCsBus_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 9: // queryData(TCsBus, int, int, String)
	{
	    oe.cav.bean.logic.bus.TCsBus $param_TCsBus_1;
	    int $param_int_2;
	    int $param_int_3;
	    java.lang.String $param_String_4;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_TCsBus_1 = (oe.cav.bean.logic.bus.TCsBus) in.readObject();
		$param_int_2 = in.readInt();
		$param_int_3 = in.readInt();
		$param_String_4 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.queryData($param_TCsBus_1, $param_int_2, $param_int_3, $param_String_4);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 10: // queryDataNum(TCsBus, String)
	{
	    oe.cav.bean.logic.bus.TCsBus $param_TCsBus_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_TCsBus_1 = (oe.cav.bean.logic.bus.TCsBus) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.queryDataNum($param_TCsBus_1, $param_String_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
