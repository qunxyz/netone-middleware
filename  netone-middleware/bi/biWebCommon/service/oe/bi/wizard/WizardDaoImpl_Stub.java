// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package oe.bi.wizard;

public final class WizardDaoImpl_Stub
    extends java.rmi.server.RemoteStub
    implements oe.bi.wizard.WizardDao, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("boolean checkExist(java.lang.String)"),
	new java.rmi.server.Operation("void create(oe.bi.etl.obj.ChoiceInfo, java.lang.String)"),
	new java.rmi.server.Operation("void delete(java.lang.String)"),
	new java.rmi.server.Operation("oe.bi.etl.obj.ChoiceInfo fromXml(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List list()"),
	new java.rmi.server.Operation("java.lang.String listTree()[][]"),
	new java.rmi.server.Operation("void modify(oe.bi.etl.obj.ChoiceInfo)"),
	new java.rmi.server.Operation("java.lang.String subTree(java.lang.String, oe.bi.dao.ui.obj.NodeObj)"),
	new java.rmi.server.Operation("java.lang.String timeTree(oe.bi.dao.ui.obj.NodeObj)"),
	new java.rmi.server.Operation("java.lang.String toXml(oe.bi.etl.obj.ChoiceInfo)")
    };
    
    private static final long interfaceHash = 3147861746184854062L;
    
    private static final long serialVersionUID = 2;
    
    private static boolean useNewInvoke;
    private static java.lang.reflect.Method $method_checkExist_0;
    private static java.lang.reflect.Method $method_create_1;
    private static java.lang.reflect.Method $method_delete_2;
    private static java.lang.reflect.Method $method_fromXml_3;
    private static java.lang.reflect.Method $method_list_4;
    private static java.lang.reflect.Method $method_listTree_5;
    private static java.lang.reflect.Method $method_modify_6;
    private static java.lang.reflect.Method $method_subTree_7;
    private static java.lang.reflect.Method $method_timeTree_8;
    private static java.lang.reflect.Method $method_toXml_9;
    
    static {
	try {
	    java.rmi.server.RemoteRef.class.getMethod("invoke",
		new java.lang.Class[] {
		    java.rmi.Remote.class,
		    java.lang.reflect.Method.class,
		    java.lang.Object[].class,
		    long.class
		});
	    useNewInvoke = true;
	    $method_checkExist_0 = oe.bi.wizard.WizardDao.class.getMethod("checkExist", new java.lang.Class[] {java.lang.String.class});
	    $method_create_1 = oe.bi.wizard.WizardDao.class.getMethod("create", new java.lang.Class[] {oe.bi.etl.obj.ChoiceInfo.class, java.lang.String.class});
	    $method_delete_2 = oe.bi.wizard.WizardDao.class.getMethod("delete", new java.lang.Class[] {java.lang.String.class});
	    $method_fromXml_3 = oe.bi.wizard.WizardDao.class.getMethod("fromXml", new java.lang.Class[] {java.lang.String.class});
	    $method_list_4 = oe.bi.wizard.WizardDao.class.getMethod("list", new java.lang.Class[] {});
	    $method_listTree_5 = oe.bi.wizard.WizardDao.class.getMethod("listTree", new java.lang.Class[] {});
	    $method_modify_6 = oe.bi.wizard.WizardDao.class.getMethod("modify", new java.lang.Class[] {oe.bi.etl.obj.ChoiceInfo.class});
	    $method_subTree_7 = oe.bi.wizard.WizardDao.class.getMethod("subTree", new java.lang.Class[] {java.lang.String.class, oe.bi.dao.ui.obj.NodeObj.class});
	    $method_timeTree_8 = oe.bi.wizard.WizardDao.class.getMethod("timeTree", new java.lang.Class[] {oe.bi.dao.ui.obj.NodeObj.class});
	    $method_toXml_9 = oe.bi.wizard.WizardDao.class.getMethod("toXml", new java.lang.Class[] {oe.bi.etl.obj.ChoiceInfo.class});
	} catch (java.lang.NoSuchMethodException e) {
	    useNewInvoke = false;
	}
    }
    
    // constructors
    public WizardDaoImpl_Stub() {
	super();
    }
    public WizardDaoImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of checkExist(String)
    public boolean checkExist(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_checkExist_0, new java.lang.Object[] {$param_String_1}, -7149324620357741348L);
		return ((java.lang.Boolean) $result).booleanValue();
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		boolean $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = in.readBoolean();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of create(ChoiceInfo, String)
    public void create(oe.bi.etl.obj.ChoiceInfo $param_ChoiceInfo_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_create_1, new java.lang.Object[] {$param_ChoiceInfo_1, $param_String_2}, 5988886988205004612L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_ChoiceInfo_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of delete(String)
    public void delete(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_delete_2, new java.lang.Object[] {$param_String_1}, -5341333926771897608L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fromXml(String)
    public oe.bi.etl.obj.ChoiceInfo fromXml(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fromXml_3, new java.lang.Object[] {$param_String_1}, 1951238584395041705L);
		return ((oe.bi.etl.obj.ChoiceInfo) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		oe.bi.etl.obj.ChoiceInfo $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (oe.bi.etl.obj.ChoiceInfo) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of list()
    public java.util.List list()
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_list_4, null, 3688649760882983761L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 4, interfaceHash);
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of listTree()
    public java.lang.String[][] listTree()
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_listTree_5, null, 653427802140339910L);
		return ((java.lang.String[][]) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 5, interfaceHash);
		ref.invoke(call);
		java.lang.String[][] $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.String[][]) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of modify(ChoiceInfo)
    public void modify(oe.bi.etl.obj.ChoiceInfo $param_ChoiceInfo_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_modify_6, new java.lang.Object[] {$param_ChoiceInfo_1}, -7007234126018957870L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 6, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_ChoiceInfo_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of subTree(String, NodeObj)
    public java.lang.String subTree(java.lang.String $param_String_1, oe.bi.dao.ui.obj.NodeObj $param_NodeObj_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_subTree_7, new java.lang.Object[] {$param_String_1, $param_NodeObj_2}, -7499816922542882014L);
		return ((java.lang.String) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 7, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_NodeObj_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.lang.String $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.String) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of timeTree(NodeObj)
    public java.lang.String timeTree(oe.bi.dao.ui.obj.NodeObj $param_NodeObj_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_timeTree_8, new java.lang.Object[] {$param_NodeObj_1}, -1964405901515290405L);
		return ((java.lang.String) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 8, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_NodeObj_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.lang.String $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.String) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of toXml(ChoiceInfo)
    public java.lang.String toXml(oe.bi.etl.obj.ChoiceInfo $param_ChoiceInfo_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_toXml_9, new java.lang.Object[] {$param_ChoiceInfo_1}, -5130238065362880628L);
		return ((java.lang.String) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 9, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_ChoiceInfo_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.lang.String $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.String) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
