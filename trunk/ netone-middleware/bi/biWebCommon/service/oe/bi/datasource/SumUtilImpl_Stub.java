// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package oe.bi.datasource;

public final class SumUtilImpl_Stub
    extends java.rmi.server.RemoteStub
    implements oe.bi.datasource.SumUtilIfc, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("java.lang.String checkColumnlist(java.util.List)"),
	new java.rmi.server.Operation("void deleteTable(java.lang.String)"),
	new java.rmi.server.Operation("boolean excelInAdddata(java.lang.String, java.lang.String, java.lang.String, java.lang.String[])"),
	new java.rmi.server.Operation("java.util.Map excelInSqlExe(java.lang.String)"),
	new java.rmi.server.Operation("void excelTableCreate(java.lang.String, java.lang.String[])"),
	new java.rmi.server.Operation("java.util.List exportDyData(java.lang.String, java.util.Map)"),
	new java.rmi.server.Operation("java.util.List getAllTableName(java.lang.String[], java.lang.String)"),
	new java.rmi.server.Operation("java.util.Map getColumnNameBySQL(java.lang.String[], java.lang.String)"),
	new java.rmi.server.Operation("java.util.List getColumnNameByTableName(java.lang.String[], java.lang.String)"),
	new java.rmi.server.Operation("java.lang.String getDatabaseName(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.util.List getResultBySQL(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.lang.String searchToAdd(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.lang.String searchToAddByCount(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.lang.String searchToAddByNumber(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.lang.String searchToAddByTime(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)")
    };
    
    private static final long interfaceHash = -4011555926317784742L;
    
    private static final long serialVersionUID = 2;
    
    private static boolean useNewInvoke;
    private static java.lang.reflect.Method $method_checkColumnlist_0;
    private static java.lang.reflect.Method $method_deleteTable_1;
    private static java.lang.reflect.Method $method_excelInAdddata_2;
    private static java.lang.reflect.Method $method_excelInSqlExe_3;
    private static java.lang.reflect.Method $method_excelTableCreate_4;
    private static java.lang.reflect.Method $method_exportDyData_5;
    private static java.lang.reflect.Method $method_getAllTableName_6;
    private static java.lang.reflect.Method $method_getColumnNameBySQL_7;
    private static java.lang.reflect.Method $method_getColumnNameByTableName_8;
    private static java.lang.reflect.Method $method_getDatabaseName_9;
    private static java.lang.reflect.Method $method_getResultBySQL_10;
    private static java.lang.reflect.Method $method_searchToAdd_11;
    private static java.lang.reflect.Method $method_searchToAddByCount_12;
    private static java.lang.reflect.Method $method_searchToAddByNumber_13;
    private static java.lang.reflect.Method $method_searchToAddByTime_14;
    
    static {
	try {
	    java.rmi.server.RemoteRef.class.getMethod("invoke",
		new java.lang.Class[] {
		    java.rmi.Remote.class,
		    java.lang.reflect.Method.class,
		    java.lang.Object[].class,
		    long.class
		});
	    useNewInvoke = true;
	    $method_checkColumnlist_0 = oe.bi.datasource.SumUtilIfc.class.getMethod("checkColumnlist", new java.lang.Class[] {java.util.List.class});
	    $method_deleteTable_1 = oe.bi.datasource.SumUtilIfc.class.getMethod("deleteTable", new java.lang.Class[] {java.lang.String.class});
	    $method_excelInAdddata_2 = oe.bi.datasource.SumUtilIfc.class.getMethod("excelInAdddata", new java.lang.Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String[].class});
	    $method_excelInSqlExe_3 = oe.bi.datasource.SumUtilIfc.class.getMethod("excelInSqlExe", new java.lang.Class[] {java.lang.String.class});
	    $method_excelTableCreate_4 = oe.bi.datasource.SumUtilIfc.class.getMethod("excelTableCreate", new java.lang.Class[] {java.lang.String.class, java.lang.String[].class});
	    $method_exportDyData_5 = oe.bi.datasource.SumUtilIfc.class.getMethod("exportDyData", new java.lang.Class[] {java.lang.String.class, java.util.Map.class});
	    $method_getAllTableName_6 = oe.bi.datasource.SumUtilIfc.class.getMethod("getAllTableName", new java.lang.Class[] {java.lang.String[].class, java.lang.String.class});
	    $method_getColumnNameBySQL_7 = oe.bi.datasource.SumUtilIfc.class.getMethod("getColumnNameBySQL", new java.lang.Class[] {java.lang.String[].class, java.lang.String.class});
	    $method_getColumnNameByTableName_8 = oe.bi.datasource.SumUtilIfc.class.getMethod("getColumnNameByTableName", new java.lang.Class[] {java.lang.String[].class, java.lang.String.class});
	    $method_getDatabaseName_9 = oe.bi.datasource.SumUtilIfc.class.getMethod("getDatabaseName", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_getResultBySQL_10 = oe.bi.datasource.SumUtilIfc.class.getMethod("getResultBySQL", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_searchToAdd_11 = oe.bi.datasource.SumUtilIfc.class.getMethod("searchToAdd", new java.lang.Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class});
	    $method_searchToAddByCount_12 = oe.bi.datasource.SumUtilIfc.class.getMethod("searchToAddByCount", new java.lang.Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class});
	    $method_searchToAddByNumber_13 = oe.bi.datasource.SumUtilIfc.class.getMethod("searchToAddByNumber", new java.lang.Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class});
	    $method_searchToAddByTime_14 = oe.bi.datasource.SumUtilIfc.class.getMethod("searchToAddByTime", new java.lang.Class[] {java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class});
	} catch (java.lang.NoSuchMethodException e) {
	    useNewInvoke = false;
	}
    }
    
    // constructors
    public SumUtilImpl_Stub() {
	super();
    }
    public SumUtilImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of checkColumnlist(List)
    public java.lang.String checkColumnlist(java.util.List $param_List_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_checkColumnlist_0, new java.lang.Object[] {$param_List_1}, 8505604032453252150L);
		return ((java.lang.String) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_List_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.lang.String $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.String) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of deleteTable(String)
    public void deleteTable(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_deleteTable_1, new java.lang.Object[] {$param_String_1}, -6433577629390148707L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of excelInAdddata(String, String, String, String[])
    public boolean excelInAdddata(java.lang.String $param_String_1, java.lang.String $param_String_2, java.lang.String $param_String_3, java.lang.String[] $param_arrayOf_String_4)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_excelInAdddata_2, new java.lang.Object[] {$param_String_1, $param_String_2, $param_String_3, $param_arrayOf_String_4}, -4984815304917198697L);
		return ((java.lang.Boolean) $result).booleanValue();
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		    out.writeObject($param_String_3);
		    out.writeObject($param_arrayOf_String_4);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		boolean $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = in.readBoolean();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of excelInSqlExe(String)
    public java.util.Map excelInSqlExe(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_excelInSqlExe_3, new java.lang.Object[] {$param_String_1}, -2874091654625221181L);
		return ((java.util.Map) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.Map $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.Map) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of excelTableCreate(String, String[])
    public void excelTableCreate(java.lang.String $param_String_1, java.lang.String[] $param_arrayOf_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_excelTableCreate_4, new java.lang.Object[] {$param_String_1, $param_arrayOf_String_2}, -7006944910499484141L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 4, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_arrayOf_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of exportDyData(String, Map)
    public java.util.List exportDyData(java.lang.String $param_String_1, java.util.Map $param_Map_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_exportDyData_5, new java.lang.Object[] {$param_String_1, $param_Map_2}, -6237553001798035617L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 5, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_Map_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getAllTableName(String[], String)
    public java.util.List getAllTableName(java.lang.String[] $param_arrayOf_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getAllTableName_6, new java.lang.Object[] {$param_arrayOf_String_1, $param_String_2}, -7017194490143066753L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 6, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_arrayOf_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getColumnNameBySQL(String[], String)
    public java.util.Map getColumnNameBySQL(java.lang.String[] $param_arrayOf_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getColumnNameBySQL_7, new java.lang.Object[] {$param_arrayOf_String_1, $param_String_2}, 6473950542245092709L);
		return ((java.util.Map) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 7, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_arrayOf_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.Map $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.Map) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getColumnNameByTableName(String[], String)
    public java.util.List getColumnNameByTableName(java.lang.String[] $param_arrayOf_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getColumnNameByTableName_8, new java.lang.Object[] {$param_arrayOf_String_1, $param_String_2}, 1679279459097738536L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 8, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_arrayOf_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getDatabaseName(String, String)
    public java.lang.String getDatabaseName(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getDatabaseName_9, new java.lang.Object[] {$param_String_1, $param_String_2}, -2361812480979116863L);
		return ((java.lang.String) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 9, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.lang.String $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.String) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getResultBySQL(String, String)
    public java.util.List getResultBySQL(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_getResultBySQL_10, new java.lang.Object[] {$param_String_1, $param_String_2}, 4615654595352646480L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 10, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of searchToAdd(String, String, String, String)
    public java.lang.String searchToAdd(java.lang.String $param_String_1, java.lang.String $param_String_2, java.lang.String $param_String_3, java.lang.String $param_String_4)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_searchToAdd_11, new java.lang.Object[] {$param_String_1, $param_String_2, $param_String_3, $param_String_4}, -6591670476235024556L);
		return ((java.lang.String) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 11, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		    out.writeObject($param_String_3);
		    out.writeObject($param_String_4);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.lang.String $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.String) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of searchToAddByCount(String, String, String, String, String)
    public java.lang.String searchToAddByCount(java.lang.String $param_String_1, java.lang.String $param_String_2, java.lang.String $param_String_3, java.lang.String $param_String_4, java.lang.String $param_String_5)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_searchToAddByCount_12, new java.lang.Object[] {$param_String_1, $param_String_2, $param_String_3, $param_String_4, $param_String_5}, 4317877314053483162L);
		return ((java.lang.String) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 12, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		    out.writeObject($param_String_3);
		    out.writeObject($param_String_4);
		    out.writeObject($param_String_5);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.lang.String $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.String) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of searchToAddByNumber(String, String, String, String, String)
    public java.lang.String searchToAddByNumber(java.lang.String $param_String_1, java.lang.String $param_String_2, java.lang.String $param_String_3, java.lang.String $param_String_4, java.lang.String $param_String_5)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_searchToAddByNumber_13, new java.lang.Object[] {$param_String_1, $param_String_2, $param_String_3, $param_String_4, $param_String_5}, 1404971599211088502L);
		return ((java.lang.String) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 13, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		    out.writeObject($param_String_3);
		    out.writeObject($param_String_4);
		    out.writeObject($param_String_5);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.lang.String $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.String) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of searchToAddByTime(String, String, String, String, String)
    public java.lang.String searchToAddByTime(java.lang.String $param_String_1, java.lang.String $param_String_2, java.lang.String $param_String_3, java.lang.String $param_String_4, java.lang.String $param_String_5)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_searchToAddByTime_14, new java.lang.Object[] {$param_String_1, $param_String_2, $param_String_3, $param_String_4, $param_String_5}, 8578526055632246436L);
		return ((java.lang.String) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 14, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		    out.writeObject($param_String_3);
		    out.writeObject($param_String_4);
		    out.writeObject($param_String_5);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.lang.String $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.String) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
