// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package oe.security3a.seupublic.client;

public final class CupmRmiImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("boolean checkRolePermission(java.lang.String, java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("boolean checkRolePermissionCore(java.lang.String, java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("boolean checkRoleSelfPermission(java.lang.String, java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("boolean checkRoleSelfPermissionCore(java.lang.String, java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("boolean checkUserPermission(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("boolean checkUserPermissionCore(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.lang.String fetchConfig(java.lang.String)"),
	new java.rmi.server.Operation("void initCacheRole(java.lang.String)"),
	new java.rmi.server.Operation("void initCacheRoleCore(java.lang.String)"),
	new java.rmi.server.Operation("void initCacheUser(java.lang.String)"),
	new java.rmi.server.Operation("void initCacheall()"),
	new java.rmi.server.Operation("boolean log(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.util.List logList(oe.security3a.seucore.obj.db.UmsOperationLog, java.util.Map, java.lang.String, int, int)"),
	new java.rmi.server.Operation("long logsNumber(oe.security3a.seucore.obj.db.UmsOperationLog, java.util.Map, java.lang.String)"),
	new java.rmi.server.Operation("java.lang.String queryLog(java.lang.String)[]"),
	new java.rmi.server.Operation("java.lang.String todo(java.lang.String, java.lang.String)")
    };
    
    private static final long interfaceHash = -9065541931682708016L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (opnum < 0) {
	    if (hash == 4888925561119516389L) {
		opnum = 0;
	    } else if (hash == 3029487177548687765L) {
		opnum = 1;
	    } else if (hash == 925392374936604626L) {
		opnum = 2;
	    } else if (hash == -9176998151656307580L) {
		opnum = 3;
	    } else if (hash == 1770983099323614613L) {
		opnum = 4;
	    } else if (hash == -5978440521603341089L) {
		opnum = 5;
	    } else if (hash == 7919569691579463003L) {
		opnum = 6;
	    } else if (hash == -6282133292119654757L) {
		opnum = 7;
	    } else if (hash == 8488920176988970969L) {
		opnum = 8;
	    } else if (hash == 7202392616855357734L) {
		opnum = 9;
	    } else if (hash == 2989999673558813106L) {
		opnum = 10;
	    } else if (hash == 8999362055218632016L) {
		opnum = 11;
	    } else if (hash == -6566443951429688238L) {
		opnum = 12;
	    } else if (hash == 8252707500489229052L) {
		opnum = 13;
	    } else if (hash == -9065563880911952883L) {
		opnum = 14;
	    } else if (hash == 9070479293440148805L) {
		opnum = 15;
	    } else {
		throw new java.rmi.UnmarshalException("invalid method hash");
	    }
	} else {
	    if (hash != interfaceHash)
		throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	}
	
	oe.security3a.seupublic.client.CupmRmiImpl server = (oe.security3a.seupublic.client.CupmRmiImpl) obj;
	switch (opnum) {
	case 0: // checkRolePermission(String, String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    java.lang.String $param_String_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.checkRolePermission($param_String_1, $param_String_2, $param_String_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // checkRolePermissionCore(String, String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    java.lang.String $param_String_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.checkRolePermissionCore($param_String_1, $param_String_2, $param_String_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // checkRoleSelfPermission(String, String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    java.lang.String $param_String_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.checkRoleSelfPermission($param_String_1, $param_String_2, $param_String_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // checkRoleSelfPermissionCore(String, String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    java.lang.String $param_String_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.checkRoleSelfPermissionCore($param_String_1, $param_String_2, $param_String_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // checkUserPermission(String, String, String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    java.lang.String $param_String_3;
	    java.lang.String $param_String_4;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
		$param_String_4 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.checkUserPermission($param_String_1, $param_String_2, $param_String_3, $param_String_4);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // checkUserPermissionCore(String, String, String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    java.lang.String $param_String_3;
	    java.lang.String $param_String_4;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
		$param_String_4 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.checkUserPermissionCore($param_String_1, $param_String_2, $param_String_3, $param_String_4);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // fetchConfig(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.lang.String $result = server.fetchConfig($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // initCacheRole(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.initCacheRole($param_String_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 8: // initCacheRoleCore(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.initCacheRoleCore($param_String_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 9: // initCacheUser(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.initCacheUser($param_String_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 10: // initCacheall()
	{
	    call.releaseInputStream();
	    server.initCacheall();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 11: // log(String, String, String, String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    java.lang.String $param_String_3;
	    java.lang.String $param_String_4;
	    java.lang.String $param_String_5;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
		$param_String_4 = (java.lang.String) in.readObject();
		$param_String_5 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    boolean $result = server.log($param_String_1, $param_String_2, $param_String_3, $param_String_4, $param_String_5);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeBoolean($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 12: // logList(UmsOperationLog, Map, String, int, int)
	{
	    oe.security3a.seucore.obj.db.UmsOperationLog $param_UmsOperationLog_1;
	    java.util.Map $param_Map_2;
	    java.lang.String $param_String_3;
	    int $param_int_4;
	    int $param_int_5;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_UmsOperationLog_1 = (oe.security3a.seucore.obj.db.UmsOperationLog) in.readObject();
		$param_Map_2 = (java.util.Map) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
		$param_int_4 = in.readInt();
		$param_int_5 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.List $result = server.logList($param_UmsOperationLog_1, $param_Map_2, $param_String_3, $param_int_4, $param_int_5);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 13: // logsNumber(UmsOperationLog, Map, String)
	{
	    oe.security3a.seucore.obj.db.UmsOperationLog $param_UmsOperationLog_1;
	    java.util.Map $param_Map_2;
	    java.lang.String $param_String_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_UmsOperationLog_1 = (oe.security3a.seucore.obj.db.UmsOperationLog) in.readObject();
		$param_Map_2 = (java.util.Map) in.readObject();
		$param_String_3 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    long $result = server.logsNumber($param_UmsOperationLog_1, $param_Map_2, $param_String_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeLong($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 14: // queryLog(String)
	{
	    java.lang.String $param_String_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.lang.String[] $result = server.queryLog($param_String_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 15: // todo(String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.lang.String $result = server.todo($param_String_1, $param_String_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
