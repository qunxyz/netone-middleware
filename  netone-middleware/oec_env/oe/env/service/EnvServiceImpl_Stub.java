// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package oe.env.service;

public final class EnvServiceImpl_Stub
    extends java.rmi.server.RemoteStub
    implements oe.env.client.EnvService, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void addEnv(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.lang.String fetchAllEnvSystemInfo()[][]"),
	new java.rmi.server.Operation("java.lang.String fetchAllJppScript()[][]"),
	new java.rmi.server.Operation("java.lang.String fetchEnvValue(java.lang.String)"),
	new java.rmi.server.Operation("java.lang.String fetchJppScript(java.lang.String)"),
	new java.rmi.server.Operation("java.lang.String fetchJppScriptModel(java.lang.String)")
    };
    
    private static final long interfaceHash = -671319655889827564L;
    
    private static final long serialVersionUID = 2;
    
    private static boolean useNewInvoke;
    private static java.lang.reflect.Method $method_addEnv_0;
    private static java.lang.reflect.Method $method_fetchAllEnvSystemInfo_1;
    private static java.lang.reflect.Method $method_fetchAllJppScript_2;
    private static java.lang.reflect.Method $method_fetchEnvValue_3;
    private static java.lang.reflect.Method $method_fetchJppScript_4;
    private static java.lang.reflect.Method $method_fetchJppScriptModel_5;
    
    static {
	try {
	    java.rmi.server.RemoteRef.class.getMethod("invoke",
		new java.lang.Class[] {
		    java.rmi.Remote.class,
		    java.lang.reflect.Method.class,
		    java.lang.Object[].class,
		    long.class
		});
	    useNewInvoke = true;
	    $method_addEnv_0 = oe.env.client.EnvService.class.getMethod("addEnv", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_fetchAllEnvSystemInfo_1 = oe.env.client.EnvService.class.getMethod("fetchAllEnvSystemInfo", new java.lang.Class[] {});
	    $method_fetchAllJppScript_2 = oe.env.client.EnvService.class.getMethod("fetchAllJppScript", new java.lang.Class[] {});
	    $method_fetchEnvValue_3 = oe.env.client.EnvService.class.getMethod("fetchEnvValue", new java.lang.Class[] {java.lang.String.class});
	    $method_fetchJppScript_4 = oe.env.client.EnvService.class.getMethod("fetchJppScript", new java.lang.Class[] {java.lang.String.class});
	    $method_fetchJppScriptModel_5 = oe.env.client.EnvService.class.getMethod("fetchJppScriptModel", new java.lang.Class[] {java.lang.String.class});
	} catch (java.lang.NoSuchMethodException e) {
	    useNewInvoke = false;
	}
    }
    
    // constructors
    public EnvServiceImpl_Stub() {
	super();
    }
    public EnvServiceImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of addEnv(String, String)
    public void addEnv(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_addEnv_0, new java.lang.Object[] {$param_String_1, $param_String_2}, -8445371183975090477L);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchAllEnvSystemInfo()
    public java.lang.String[][] fetchAllEnvSystemInfo()
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchAllEnvSystemInfo_1, null, -5346088209433792353L);
		return ((java.lang.String[][]) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
		ref.invoke(call);
		java.lang.String[][] $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.String[][]) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchAllJppScript()
    public java.lang.String[][] fetchAllJppScript()
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchAllJppScript_2, null, 4489533774540177933L);
		return ((java.lang.String[][]) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
		ref.invoke(call);
		java.lang.String[][] $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.String[][]) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchEnvValue(String)
    public java.lang.String fetchEnvValue(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchEnvValue_3, new java.lang.Object[] {$param_String_1}, -8067972067650788385L);
		return ((java.lang.String) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.lang.String $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.String) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchJppScript(String)
    public java.lang.String fetchJppScript(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchJppScript_4, new java.lang.Object[] {$param_String_1}, -139670711721671549L);
		return ((java.lang.String) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 4, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.lang.String $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.String) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchJppScriptModel(String)
    public java.lang.String fetchJppScriptModel(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchJppScriptModel_5, new java.lang.Object[] {$param_String_1}, -2651076003529216519L);
		return ((java.lang.String) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 5, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.lang.String $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.lang.String) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
