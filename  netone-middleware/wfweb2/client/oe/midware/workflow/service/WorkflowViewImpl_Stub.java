// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package oe.midware.workflow.service;

public final class WorkflowViewImpl_Stub
    extends java.rmi.server.RemoteStub
    implements oe.midware.workflow.service.WorkflowView, java.rmi.Remote
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("java.util.List coreSqlview(java.lang.String)"),
	new java.rmi.server.Operation("oe.midware.workflow.xpdl.model.activity.Activity fetchActivity(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchDoneWorklist(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchDoneWorklist(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchExceptionWorklist(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchExceptionWorklist(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchQuashWorklist(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchQuashWorklist(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchRelevantVar(java.lang.String)"),
	new java.rmi.server.Operation("oe.midware.workflow.runtime.ormobj.TWfRelevantvar fetchRelevantVar(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.util.Map fetchRelevantvarMap(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchRunningWorklist(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchRunningWorklist(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchSubflowByRuntimeid(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchSubflowByWorkcode(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchSyncWaittingWorkList(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchWorkList(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("oe.midware.workflow.xpdl.model.workflow.WorkflowProcess fetchWorkflowProcess(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List fetchWorklist(java.lang.String)"),
	new java.rmi.server.Operation("boolean haveRunningOrSubflowWaittingWorklist(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List listRelevantvar(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List listRelevartvarInstance(java.lang.String)"),
	new java.rmi.server.Operation("oe.midware.workflow.runtime.ormobj.TWfRelevantvar listRelevartvarInstance(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.util.List listWorklist(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List listinstance(java.lang.String)"),
	new java.rmi.server.Operation("java.util.List listxRelevartvarInstance(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.util.List listxWorkListInstance(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("java.util.List listxinstance(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("oe.midware.workflow.xpdl.model.workflow.WorkflowProcess loadProcess(java.lang.String)"),
	new java.rmi.server.Operation("oe.midware.workflow.xpdl.model.workflow.WorkflowProcess loadProcessUrl(java.lang.String)"),
	new java.rmi.server.Operation("oe.midware.workflow.runtime.ormobj.TWfRelevantvar loadRelevantvar(java.lang.String)"),
	new java.rmi.server.Operation("oe.midware.workflow.runtime.ormobj.TWfRuntime loadRuntime(java.lang.String)"),
	new java.rmi.server.Operation("oe.midware.workflow.runtime.ormobj.TWfWorklist loadWorklist(java.lang.String)")
    };
    
    private static final long interfaceHash = -6654306912399783810L;
    
    private static final long serialVersionUID = 2;
    
    private static boolean useNewInvoke;
    private static java.lang.reflect.Method $method_coreSqlview_0;
    private static java.lang.reflect.Method $method_fetchActivity_1;
    private static java.lang.reflect.Method $method_fetchDoneWorklist_2;
    private static java.lang.reflect.Method $method_fetchDoneWorklist_3;
    private static java.lang.reflect.Method $method_fetchExceptionWorklist_4;
    private static java.lang.reflect.Method $method_fetchExceptionWorklist_5;
    private static java.lang.reflect.Method $method_fetchQuashWorklist_6;
    private static java.lang.reflect.Method $method_fetchQuashWorklist_7;
    private static java.lang.reflect.Method $method_fetchRelevantVar_8;
    private static java.lang.reflect.Method $method_fetchRelevantVar_9;
    private static java.lang.reflect.Method $method_fetchRelevantvarMap_10;
    private static java.lang.reflect.Method $method_fetchRunningWorklist_11;
    private static java.lang.reflect.Method $method_fetchRunningWorklist_12;
    private static java.lang.reflect.Method $method_fetchSubflowByRuntimeid_13;
    private static java.lang.reflect.Method $method_fetchSubflowByWorkcode_14;
    private static java.lang.reflect.Method $method_fetchSyncWaittingWorkList_15;
    private static java.lang.reflect.Method $method_fetchWorkList_16;
    private static java.lang.reflect.Method $method_fetchWorkflowProcess_17;
    private static java.lang.reflect.Method $method_fetchWorklist_18;
    private static java.lang.reflect.Method $method_haveRunningOrSubflowWaittingWorklist_19;
    private static java.lang.reflect.Method $method_listRelevantvar_20;
    private static java.lang.reflect.Method $method_listRelevartvarInstance_21;
    private static java.lang.reflect.Method $method_listRelevartvarInstance_22;
    private static java.lang.reflect.Method $method_listWorklist_23;
    private static java.lang.reflect.Method $method_listinstance_24;
    private static java.lang.reflect.Method $method_listxRelevartvarInstance_25;
    private static java.lang.reflect.Method $method_listxWorkListInstance_26;
    private static java.lang.reflect.Method $method_listxinstance_27;
    private static java.lang.reflect.Method $method_loadProcess_28;
    private static java.lang.reflect.Method $method_loadProcessUrl_29;
    private static java.lang.reflect.Method $method_loadRelevantvar_30;
    private static java.lang.reflect.Method $method_loadRuntime_31;
    private static java.lang.reflect.Method $method_loadWorklist_32;
    
    static {
	try {
	    java.rmi.server.RemoteRef.class.getMethod("invoke",
		new java.lang.Class[] {
		    java.rmi.Remote.class,
		    java.lang.reflect.Method.class,
		    java.lang.Object[].class,
		    long.class
		});
	    useNewInvoke = true;
	    $method_coreSqlview_0 = oe.midware.workflow.service.WorkflowView.class.getMethod("coreSqlview", new java.lang.Class[] {java.lang.String.class});
	    $method_fetchActivity_1 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchActivity", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_fetchDoneWorklist_2 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchDoneWorklist", new java.lang.Class[] {java.lang.String.class});
	    $method_fetchDoneWorklist_3 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchDoneWorklist", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_fetchExceptionWorklist_4 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchExceptionWorklist", new java.lang.Class[] {java.lang.String.class});
	    $method_fetchExceptionWorklist_5 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchExceptionWorklist", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_fetchQuashWorklist_6 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchQuashWorklist", new java.lang.Class[] {java.lang.String.class});
	    $method_fetchQuashWorklist_7 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchQuashWorklist", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_fetchRelevantVar_8 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchRelevantVar", new java.lang.Class[] {java.lang.String.class});
	    $method_fetchRelevantVar_9 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchRelevantVar", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_fetchRelevantvarMap_10 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchRelevantvarMap", new java.lang.Class[] {java.lang.String.class});
	    $method_fetchRunningWorklist_11 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchRunningWorklist", new java.lang.Class[] {java.lang.String.class});
	    $method_fetchRunningWorklist_12 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchRunningWorklist", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_fetchSubflowByRuntimeid_13 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchSubflowByRuntimeid", new java.lang.Class[] {java.lang.String.class});
	    $method_fetchSubflowByWorkcode_14 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchSubflowByWorkcode", new java.lang.Class[] {java.lang.String.class});
	    $method_fetchSyncWaittingWorkList_15 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchSyncWaittingWorkList", new java.lang.Class[] {java.lang.String.class});
	    $method_fetchWorkList_16 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchWorkList", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_fetchWorkflowProcess_17 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchWorkflowProcess", new java.lang.Class[] {java.lang.String.class});
	    $method_fetchWorklist_18 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("fetchWorklist", new java.lang.Class[] {java.lang.String.class});
	    $method_haveRunningOrSubflowWaittingWorklist_19 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("haveRunningOrSubflowWaittingWorklist", new java.lang.Class[] {java.lang.String.class});
	    $method_listRelevantvar_20 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("listRelevantvar", new java.lang.Class[] {java.lang.String.class});
	    $method_listRelevartvarInstance_21 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("listRelevartvarInstance", new java.lang.Class[] {java.lang.String.class});
	    $method_listRelevartvarInstance_22 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("listRelevartvarInstance", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_listWorklist_23 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("listWorklist", new java.lang.Class[] {java.lang.String.class});
	    $method_listinstance_24 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("listinstance", new java.lang.Class[] {java.lang.String.class});
	    $method_listxRelevartvarInstance_25 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("listxRelevartvarInstance", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_listxWorkListInstance_26 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("listxWorkListInstance", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_listxinstance_27 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("listxinstance", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_loadProcess_28 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("loadProcess", new java.lang.Class[] {java.lang.String.class});
	    $method_loadProcessUrl_29 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("loadProcessUrl", new java.lang.Class[] {java.lang.String.class});
	    $method_loadRelevantvar_30 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("loadRelevantvar", new java.lang.Class[] {java.lang.String.class});
	    $method_loadRuntime_31 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("loadRuntime", new java.lang.Class[] {java.lang.String.class});
	    $method_loadWorklist_32 = oe.frame.bus.workflow.RuntimeMonitor.class.getMethod("loadWorklist", new java.lang.Class[] {java.lang.String.class});
	} catch (java.lang.NoSuchMethodException e) {
	    useNewInvoke = false;
	}
    }
    
    // constructors
    public WorkflowViewImpl_Stub() {
	super();
    }
    public WorkflowViewImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of coreSqlview(String)
    public java.util.List coreSqlview(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_coreSqlview_0, new java.lang.Object[] {$param_String_1}, -2884788289436715889L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchActivity(String, String)
    public oe.midware.workflow.xpdl.model.activity.Activity fetchActivity(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchActivity_1, new java.lang.Object[] {$param_String_1, $param_String_2}, -8055948456322794327L);
		return ((oe.midware.workflow.xpdl.model.activity.Activity) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		oe.midware.workflow.xpdl.model.activity.Activity $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (oe.midware.workflow.xpdl.model.activity.Activity) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchDoneWorklist(String)
    public java.util.List fetchDoneWorklist(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchDoneWorklist_2, new java.lang.Object[] {$param_String_1}, 319365363648776725L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchDoneWorklist(String, String)
    public java.util.List fetchDoneWorklist(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchDoneWorklist_3, new java.lang.Object[] {$param_String_1, $param_String_2}, 6849107280703186059L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchExceptionWorklist(String)
    public java.util.List fetchExceptionWorklist(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchExceptionWorklist_4, new java.lang.Object[] {$param_String_1}, -4622620688439750427L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 4, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchExceptionWorklist(String, String)
    public java.util.List fetchExceptionWorklist(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchExceptionWorklist_5, new java.lang.Object[] {$param_String_1, $param_String_2}, -128649894363852587L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 5, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchQuashWorklist(String)
    public java.util.List fetchQuashWorklist(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchQuashWorklist_6, new java.lang.Object[] {$param_String_1}, 5185763763696113086L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 6, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchQuashWorklist(String, String)
    public java.util.List fetchQuashWorklist(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchQuashWorklist_7, new java.lang.Object[] {$param_String_1, $param_String_2}, 3070652372840052357L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 7, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchRelevantVar(String)
    public java.util.List fetchRelevantVar(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchRelevantVar_8, new java.lang.Object[] {$param_String_1}, -2746259965687491138L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 8, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchRelevantVar(String, String)
    public oe.midware.workflow.runtime.ormobj.TWfRelevantvar fetchRelevantVar(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchRelevantVar_9, new java.lang.Object[] {$param_String_1, $param_String_2}, -2800105377060275151L);
		return ((oe.midware.workflow.runtime.ormobj.TWfRelevantvar) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 9, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		oe.midware.workflow.runtime.ormobj.TWfRelevantvar $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (oe.midware.workflow.runtime.ormobj.TWfRelevantvar) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchRelevantvarMap(String)
    public java.util.Map fetchRelevantvarMap(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchRelevantvarMap_10, new java.lang.Object[] {$param_String_1}, -3903871619636022641L);
		return ((java.util.Map) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 10, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.Map $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.Map) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchRunningWorklist(String)
    public java.util.List fetchRunningWorklist(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchRunningWorklist_11, new java.lang.Object[] {$param_String_1}, -3919924863963329282L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 11, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchRunningWorklist(String, String)
    public java.util.List fetchRunningWorklist(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchRunningWorklist_12, new java.lang.Object[] {$param_String_1, $param_String_2}, -2685786969667383331L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 12, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchSubflowByRuntimeid(String)
    public java.util.List fetchSubflowByRuntimeid(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchSubflowByRuntimeid_13, new java.lang.Object[] {$param_String_1}, -1885427205689292486L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 13, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchSubflowByWorkcode(String)
    public java.util.List fetchSubflowByWorkcode(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchSubflowByWorkcode_14, new java.lang.Object[] {$param_String_1}, -8284196820315722055L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 14, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchSyncWaittingWorkList(String)
    public java.util.List fetchSyncWaittingWorkList(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchSyncWaittingWorkList_15, new java.lang.Object[] {$param_String_1}, -1848851944183664487L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 15, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchWorkList(String, String)
    public java.util.List fetchWorkList(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchWorkList_16, new java.lang.Object[] {$param_String_1, $param_String_2}, 8305057968317744625L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 16, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchWorkflowProcess(String)
    public oe.midware.workflow.xpdl.model.workflow.WorkflowProcess fetchWorkflowProcess(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchWorkflowProcess_17, new java.lang.Object[] {$param_String_1}, -7525591794466240707L);
		return ((oe.midware.workflow.xpdl.model.workflow.WorkflowProcess) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 17, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		oe.midware.workflow.xpdl.model.workflow.WorkflowProcess $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (oe.midware.workflow.xpdl.model.workflow.WorkflowProcess) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of fetchWorklist(String)
    public java.util.List fetchWorklist(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_fetchWorklist_18, new java.lang.Object[] {$param_String_1}, -794017901512027711L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 18, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of haveRunningOrSubflowWaittingWorklist(String)
    public boolean haveRunningOrSubflowWaittingWorklist(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_haveRunningOrSubflowWaittingWorklist_19, new java.lang.Object[] {$param_String_1}, -4795387816105647208L);
		return ((java.lang.Boolean) $result).booleanValue();
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 19, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		boolean $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = in.readBoolean();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of listRelevantvar(String)
    public java.util.List listRelevantvar(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_listRelevantvar_20, new java.lang.Object[] {$param_String_1}, 3948886456419098964L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 20, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of listRelevartvarInstance(String)
    public java.util.List listRelevartvarInstance(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_listRelevartvarInstance_21, new java.lang.Object[] {$param_String_1}, 8352463183470863627L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 21, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of listRelevartvarInstance(String, String)
    public oe.midware.workflow.runtime.ormobj.TWfRelevantvar listRelevartvarInstance(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_listRelevartvarInstance_22, new java.lang.Object[] {$param_String_1, $param_String_2}, -4845953675762149479L);
		return ((oe.midware.workflow.runtime.ormobj.TWfRelevantvar) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 22, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		oe.midware.workflow.runtime.ormobj.TWfRelevantvar $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (oe.midware.workflow.runtime.ormobj.TWfRelevantvar) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of listWorklist(String)
    public java.util.List listWorklist(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_listWorklist_23, new java.lang.Object[] {$param_String_1}, 2266622520547910900L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 23, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of listinstance(String)
    public java.util.List listinstance(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_listinstance_24, new java.lang.Object[] {$param_String_1}, -6492834046902318226L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 24, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of listxRelevartvarInstance(String, String)
    public java.util.List listxRelevartvarInstance(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_listxRelevartvarInstance_25, new java.lang.Object[] {$param_String_1, $param_String_2}, 5389120783813265499L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 25, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of listxWorkListInstance(String, String)
    public java.util.List listxWorkListInstance(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_listxWorkListInstance_26, new java.lang.Object[] {$param_String_1, $param_String_2}, -1683542496201090978L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 26, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of listxinstance(String, String)
    public java.util.List listxinstance(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_listxinstance_27, new java.lang.Object[] {$param_String_1, $param_String_2}, 8157193636088483320L);
		return ((java.util.List) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 27, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_String_2);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		java.util.List $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (java.util.List) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of loadProcess(String)
    public oe.midware.workflow.xpdl.model.workflow.WorkflowProcess loadProcess(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_loadProcess_28, new java.lang.Object[] {$param_String_1}, -5269787735753088017L);
		return ((oe.midware.workflow.xpdl.model.workflow.WorkflowProcess) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 28, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		oe.midware.workflow.xpdl.model.workflow.WorkflowProcess $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (oe.midware.workflow.xpdl.model.workflow.WorkflowProcess) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of loadProcessUrl(String)
    public oe.midware.workflow.xpdl.model.workflow.WorkflowProcess loadProcessUrl(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_loadProcessUrl_29, new java.lang.Object[] {$param_String_1}, -527294248846260131L);
		return ((oe.midware.workflow.xpdl.model.workflow.WorkflowProcess) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 29, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		oe.midware.workflow.xpdl.model.workflow.WorkflowProcess $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (oe.midware.workflow.xpdl.model.workflow.WorkflowProcess) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of loadRelevantvar(String)
    public oe.midware.workflow.runtime.ormobj.TWfRelevantvar loadRelevantvar(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_loadRelevantvar_30, new java.lang.Object[] {$param_String_1}, -3715443439483249074L);
		return ((oe.midware.workflow.runtime.ormobj.TWfRelevantvar) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 30, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		oe.midware.workflow.runtime.ormobj.TWfRelevantvar $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (oe.midware.workflow.runtime.ormobj.TWfRelevantvar) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of loadRuntime(String)
    public oe.midware.workflow.runtime.ormobj.TWfRuntime loadRuntime(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_loadRuntime_31, new java.lang.Object[] {$param_String_1}, -1125246968018751849L);
		return ((oe.midware.workflow.runtime.ormobj.TWfRuntime) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 31, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		oe.midware.workflow.runtime.ormobj.TWfRuntime $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (oe.midware.workflow.runtime.ormobj.TWfRuntime) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of loadWorklist(String)
    public oe.midware.workflow.runtime.ormobj.TWfWorklist loadWorklist(java.lang.String $param_String_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		Object $result = ref.invoke(this, $method_loadWorklist_32, new java.lang.Object[] {$param_String_1}, -7884567548023638245L);
		return ((oe.midware.workflow.runtime.ormobj.TWfWorklist) $result);
	    } else {
		java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 32, interfaceHash);
		try {
		    java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		oe.midware.workflow.runtime.ormobj.TWfWorklist $result;
		try {
		    java.io.ObjectInput in = call.getInputStream();
		    $result = (oe.midware.workflow.runtime.ormobj.TWfWorklist) in.readObject();
		} catch (java.io.IOException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} catch (java.lang.ClassNotFoundException e) {
		    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
		} finally {
		    ref.done(call);
		}
		return $result;
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
